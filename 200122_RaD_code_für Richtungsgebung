#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Mahony.h>
#include <Madgwick.h>

//#define NXP_FXOS8700_FXAS21002
//
//#define AHRS_VARIANT   NXP_FXOS8700_FXAS21002

#include <Adafruit_FXAS21002C.h>
#include <Adafruit_FXOS8700.h>

Adafruit_FXAS21002C gyro = Adafruit_FXAS21002C(0x0021002C);
Adafruit_FXOS8700 accelmag = Adafruit_FXOS8700(0x8700A, 0x8700B);

// Mag calibration values are calculated via ahrs_calibration.
// These values must be determined for each baord/environment.
// See the image in this sketch folder for the values used
// below.

// Eigene Kalibrierung
//long mag_x_cal, mag_y_cal, mag_z_cal;
//float mag_event.magnetic.x, mag_event.magnetic.y, mag_event.magnetic.z;

// Offsets applied to raw x/y/z mag values
//float mag_offsets[3]            = { -2.50F, 5.27F, 35.46F };
//
////// Soft iron error compensation matrix
//float mag_softiron_matrix[3][3] = { {  0.970,  0.020,  0.011 },
//                                    {  0.020,  0.970, -0.038 },
//                                    {  0.011, -0.038,  1.065 } };
//
//float mag_field_strength        = 51.13F;

// erster Versuch selbst - solala
//float mag_offsets[3]            = { 12.97F, 7.96F, 78.00F };
//
//// Soft iron error compensation matrix
//float mag_softiron_matrix[3][3] = { {  0.849, -0.203, -0.199 },
//                                    { -0.203,  1.251,  0.457 },
//                                    { -0.199,  0.457,  1.165 } };
//
//float mag_field_strength        = 65.91F;

// zweiter Versuch selbst - solala vl schlechter
//float mag_offsets[3]            = { 6.42F, -0.97F, 84.83F };
//
//// Soft iron error compensation matrix
//float mag_softiron_matrix[3][3] = { {  0.983,  -0.035,  0.010 },
//                                    { -0.035,   0.973,  0.014 },
//                                    {  0.010,   0.014,  1.047 } };
//
//float mag_field_strength        = 47.94F;

// dritter Versuch selbst - nicht besser geworden
float mag_offsets[3]            = { 5.85F, -0.38F, 84.20F };

// Soft iron error compensation matrix
float mag_softiron_matrix[3][3] = { {  0.983, -0.028,  0.019 },
                                    { -0.028,  0.970,  0.013 },
                                    {  0.019,  0.013,  1.050 } };

float mag_field_strength        = 49.01F;

//vierter Versuch


//// Offsets applied to compensate for gyro zero-drift error for x/y/z
float gyro_zero_offsets[3]      = { 0.0F, 0.0F, 0.0F };

// Offsets applied to compensate for gyro zero-drift error for x/y/z
// Raw values converted to rad/s based on 250dps sensitiviy (1 lsb = 0.00875 rad/s)
//float rawToDPS = 0.00875F;
//float dpsToRad = 0.017453293F;
//float gyro_zero_offsets[3]      = { 175.0F * rawToDPS * dpsToRad,
//                                   -729.0F * rawToDPS * dpsToRad,
//                                    101.0F * rawToDPS * dpsToRad };


// Mahony is lighter weight as a filter and should be used
// on slower systems
Mahony filter;
//Madgwick filter;

void setup()
{
  Serial.begin(115200);

  // Wait for the Serial Monitor to open (comment out to run without Serial Monitor)
  // while(!Serial);

  Serial.println(F("Adafruit AHRS Fusion Example")); Serial.println("");

  // Initialize the sensors.
  if(!gyro.begin())
  {
    /* There was a problem detecting the gyro ... check your connections */
    Serial.println("Ooops, no gyro detected ... Check your wiring!");
    while(1);
  }
  if(!accelmag.begin(ACCEL_RANGE_4G))
  {
    Serial.println("Ooops, no FXOS8700 detected ... Check your wiring!");
    while(1);
  }
  // Eigene Kalibrierung
  
//  for (int cal_int = 0; cal_int < 2000 ; cal_int ++){                  //Run this code 2000 times
//    sensors_event_t mag_event;
//    accelmag.getEvent(&mag_event);
//  
//    mag_x_cal += mag_event.magnetic.x;
//    mag_y_cal += mag_event.magnetic.y;
//    mag_z_cal += mag_event.magnetic.z;
//    delay(3);
//  }
//  mag_x_cal /= 2000;
//  mag_y_cal /= 2000;
//  mag_z_cal /= 2000;
//  
  // Filter expects 70 samples per second
  // Based on a Bluefruit M0 Feather ... rate should be adjuted for other MCUs
  //filter.begin(10);
  filter.begin(7);
}

void loop(void)
{
  sensors_event_t gyro_event;
  sensors_event_t accel_event;
  sensors_event_t mag_event;

  // Get new data samples
  gyro.getEvent(&gyro_event);
  accelmag.getEvent(&accel_event, &mag_event);

  // Eigene Kalibrierung
//  float x = mag_event.magnetic.x - mag_x_cal;
//  float y = mag_event.magnetic.y - mag_x_cal;
//  float z = mag_event.magnetic.z - mag_x_cal;
  
  // Apply mag offset compensation (base values in uTesla)
  float x = mag_event.magnetic.x - mag_offsets[0];
  float y = mag_event.magnetic.y - mag_offsets[1];
  float z = mag_event.magnetic.z - mag_offsets[2];

  // Apply mag soft iron error compensation
  float mx = x * mag_softiron_matrix[0][0] + y * mag_softiron_matrix[0][1] + z * mag_softiron_matrix[0][2];
  float my = x * mag_softiron_matrix[1][0] + y * mag_softiron_matrix[1][1] + z * mag_softiron_matrix[1][2];
  float mz = x * mag_softiron_matrix[2][0] + y * mag_softiron_matrix[2][1] + z * mag_softiron_matrix[2][2];

  // Apply gyro zero-rate error compensation
  float gx = gyro_event.gyro.x + gyro_zero_offsets[0];
  float gy = gyro_event.gyro.y + gyro_zero_offsets[1];
  float gz = gyro_event.gyro.z + gyro_zero_offsets[2];

  // The filter library expects gyro data in degrees/s, but adafruit sensor
  // uses rad/s so we need to convert them first (or adapt the filter lib
  // where they are being converted)
  gx *= 57.2958F;
  gy *= 57.2958F;
  gz *= 57.2958F;

  // Update the filter
  filter.update(gx, gy, gz,
                accel_event.acceleration.x, accel_event.acceleration.y, accel_event.acceleration.z,
                mx, my, mz);

  // Print the orientation filter output
  // Note: To avoid gimbal lock you should read quaternions not Euler
  // angles, but Euler angles are used here since they are easier to
  // understand looking at the raw values. See the ble fusion sketch for
  // and example of working with quaternion data.
  float roll = filter.getRoll();
  float pitch = filter.getPitch();
  float heading = filter.getYaw();
  Serial.print(millis());
  Serial.print(" - Orientation: ");
  Serial.print(heading);
  Serial.print(" ");
  Serial.print(pitch);
  Serial.print(" ");
  Serial.println(roll);

    // Print the orientation filter output in quaternions.
    // This avoids the gimbal lock problem with Euler angles when you get
    // close to 180 degrees (causing the model to rotate or flip, etc.)
//    float qw, qx, qy, qz;
//    filter.getQuaternion(&qw, &qx, &qy, &qz);
//    Serial.print(millis());
//    Serial.print(" - Quat: ");
//    Serial.print(qw);
//    Serial.print(" ");
//    Serial.print(qx);
//    Serial.print(" ");
//    Serial.print(qy);
//    Serial.print(" ");
//    Serial.println(qz);

  delay(7);
}
